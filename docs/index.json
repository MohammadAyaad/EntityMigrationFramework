{
  "README.html": {
    "href": "README.html",
    "title": "docfx-seed | Entity Migration Documentation",
    "summary": "docfx-seed Description This is a sample docfx documentation project. It contains .NET source code and markdown files. docfx.json is the configuration file for running docfx. docfx will generate a static website as similar to http://docascode.github.io/docfx-seed/index.html How to run Under Windows Install from Nuget Install Nuget.exe Create a folder, e.g. C:\\Tools\\docfx, under the folder, nuget install docfx.console Open command line: set PATH=%PATH%;C:\\Tools\\docfx\\docfx.console\\tools docfx docfx-seed\\docfx.json --serve Install from choco Install chocolatey Open command line: choco install docfx docfx docfx-seed\\docfx.json --serve Cross platform Install Mono Install Nuget.exe > mono nuget.exe install docfx.console > mono docfx.console/tools/docfx.exe docfx-seed/docfx.json Further information about docfx docfx is a tool to generate documentation towards .NET source code and markdown files. Please refer to docfx to get start. The docfx website itself is generated by docfx!"
  },
  "api/EntityMigrationFramework.Builder.IMigrationBuilder-1.html": {
    "href": "api/EntityMigrationFramework.Builder.IMigrationBuilder-1.html",
    "title": "Interface IMigrationBuilder<TBase> | Entity Migration Documentation",
    "summary": "Interface IMigrationBuilder<TBase> Namespace EntityMigrationFramework.Builder Assembly EntityMigrationFramework.dll Finalization interface for the migration builder public interface IMigrationBuilder<TBase> Type Parameters TBase The common base type for all versioned models Methods Build() Creates the migration manager with current configuration IMigrationManager<TBase> Build() Returns IMigrationManager<TBase> Build<TMigrationManager>(Func<List<IMigration>, IMigrationRegistry<TBase>, TMigrationManager>) Advanced method for creating custom migration manager implementations IMigrationManager<TBase> Build<TMigrationManager>(Func<List<IMigration>, IMigrationRegistry<TBase>, TMigrationManager> builder) where TMigrationManager : IMigrationManager<TBase> Parameters builder Func<List<IMigration>, IMigrationRegistry<TBase>, TMigrationManager> Factory function for manager creation Returns IMigrationManager<TBase> Type Parameters TMigrationManager Custom manager type"
  },
  "api/EntityMigrationFramework.Builder.IMigrationBuilderMigrationCollector-2.html": {
    "href": "api/EntityMigrationFramework.Builder.IMigrationBuilderMigrationCollector-2.html",
    "title": "Interface IMigrationBuilderMigrationCollector<TBase, NextStage> | Entity Migration Documentation",
    "summary": "Interface IMigrationBuilderMigrationCollector<TBase, NextStage> Namespace EntityMigrationFramework.Builder Assembly EntityMigrationFramework.dll Interface for collecting migration implementations during configuration public interface IMigrationBuilderMigrationCollector<TBase, NextStage> Type Parameters TBase Common base type for models NextStage Next configuration stage interface Methods AddMigration<TMigration, TSrc, TDst>() Registers a migration type with parameterless constructor IMigrationBuilderMigrationCollector<TBase, NextStage> AddMigration<TMigration, TSrc, TDst>() where TMigration : IMigration<TSrc, TDst>, new() Returns IMigrationBuilderMigrationCollector<TBase, NextStage> Type Parameters TMigration Migration implementation type TSrc Source model type TDst Destination model type AddMigration<TMigration, TSrc, TDst>(TMigration) Registers a pre-initialized migration instance IMigrationBuilderMigrationCollector<TBase, NextStage> AddMigration<TMigration, TSrc, TDst>(TMigration migration) where TMigration : IMigration<TSrc, TDst> Parameters migration TMigration Initialized migration instance Returns IMigrationBuilderMigrationCollector<TBase, NextStage> Type Parameters TMigration Migration implementation type TSrc Source model type TDst Destination model type Prepare() Completes migration registration and advances to the next stage NextStage Prepare() Returns NextStage"
  },
  "api/EntityMigrationFramework.Builder.IMigrationBuilderRegistrySelector-2.html": {
    "href": "api/EntityMigrationFramework.Builder.IMigrationBuilderRegistrySelector-2.html",
    "title": "Interface IMigrationBuilderRegistrySelector<TBase, NextStage> | Entity Migration Documentation",
    "summary": "Interface IMigrationBuilderRegistrySelector<TBase, NextStage> Namespace EntityMigrationFramework.Builder Assembly EntityMigrationFramework.dll Fluent interface for selecting and configuring migration registries public interface IMigrationBuilderRegistrySelector<TBase, NextStage> Type Parameters TBase Base type for all versioned models NextStage Next builder stage interface Extension Methods GraphMigrationRegistryBuilderExtension.UseDefaultGraphRegistry<TBase, NextStage>(IMigrationBuilderRegistrySelector<TBase, NextStage>) Methods UseRegistry<TRegistry>(Func<List<IMigration>, TRegistry>) Configures a registry implementation for migration path resolution NextStage UseRegistry<TRegistry>(Func<List<IMigration>, TRegistry> factory) where TRegistry : IMigrationRegistry<TBase> Parameters factory Func<List<IMigration>, TRegistry> Factory function that creates the registry Returns NextStage Next builder stage Type Parameters TRegistry Type of registry to use"
  },
  "api/EntityMigrationFramework.Builder.MigrationBuilder-1.html": {
    "href": "api/EntityMigrationFramework.Builder.MigrationBuilder-1.html",
    "title": "Class MigrationBuilder<TBase> | Entity Migration Documentation",
    "summary": "Class MigrationBuilder<TBase> Namespace EntityMigrationFramework.Builder Assembly EntityMigrationFramework.dll Fluent builder for configuring and creating migration managers public class MigrationBuilder<TBase> : IMigrationBuilderMigrationCollector<TBase, IMigrationBuilderRegistrySelector<TBase, IMigrationBuilder<TBase>>>, IMigrationBuilderRegistrySelector<TBase, IMigrationBuilder<TBase>>, IMigrationBuilder<TBase> Type Parameters TBase The common base type for all versioned models Inheritance object MigrationBuilder<TBase> Implements IMigrationBuilderMigrationCollector<TBase, IMigrationBuilderRegistrySelector<TBase, IMigrationBuilder<TBase>>> IMigrationBuilderRegistrySelector<TBase, IMigrationBuilder<TBase>> IMigrationBuilder<TBase> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GraphMigrationRegistryBuilderExtension.UseDefaultGraphRegistry<TBase, NextStage>(IMigrationBuilderRegistrySelector<TBase, NextStage>) Constructors MigrationBuilder() Initializes a new instance of the migration builder public MigrationBuilder() Methods AddMigration<TMigration, TSrc, TDst>() Adds a migration implementation with parameterless constructor public IMigrationBuilderMigrationCollector<TBase, IMigrationBuilderRegistrySelector<TBase, IMigrationBuilder<TBase>>> AddMigration<TMigration, TSrc, TDst>() where TMigration : IMigration<TSrc, TDst>, new() Returns IMigrationBuilderMigrationCollector<TBase, IMigrationBuilderRegistrySelector<TBase, IMigrationBuilder<TBase>>> The builder instance for method chaining Type Parameters TMigration Migration implementation type TSrc Source type for the migration TDst Destination type for the migration AddMigration<TMigration, TSrc, TDst>(TMigration) Adds a pre-configured migration instance public IMigrationBuilderMigrationCollector<TBase, IMigrationBuilderRegistrySelector<TBase, IMigrationBuilder<TBase>>> AddMigration<TMigration, TSrc, TDst>(TMigration migration) where TMigration : IMigration<TSrc, TDst> Parameters migration TMigration Configured migration instance Returns IMigrationBuilderMigrationCollector<TBase, IMigrationBuilderRegistrySelector<TBase, IMigrationBuilder<TBase>>> The builder instance for method chaining Type Parameters TMigration Migration implementation type TSrc Source type for the migration TDst Destination type for the migration Build() Builds the migration manager using the configured registry public IMigrationManager<TBase> Build() Returns IMigrationManager<TBase> Initialized migration manager instance Exceptions InvalidOperationException Thrown if registry is not configured Build<TMigrationManager>(Func<List<IMigration>, IMigrationRegistry<TBase>, TMigrationManager>) Advanced builder method for custom migration manager implementations public IMigrationManager<TBase> Build<TMigrationManager>(Func<List<IMigration>, IMigrationRegistry<TBase>, TMigrationManager> builder) where TMigrationManager : IMigrationManager<TBase> Parameters builder Func<List<IMigration>, IMigrationRegistry<TBase>, TMigrationManager> Factory function for creating the manager Returns IMigrationManager<TBase> Custom migration manager instance Type Parameters TMigrationManager Custom migration manager type Remarks This method allows using custom implementations of IMigrationManager while leveraging the builder configuration Prepare() Finalizes migration registration and transitions to registry configuration public IMigrationBuilderRegistrySelector<TBase, IMigrationBuilder<TBase>> Prepare() Returns IMigrationBuilderRegistrySelector<TBase, IMigrationBuilder<TBase>> Registry configuration interface UseRegistry<TRegistry>(Func<List<IMigration>, TRegistry>) Configures the migration registry implementation public IMigrationBuilder<TBase> UseRegistry<TRegistry>(Func<List<IMigration>, TRegistry> factory) where TRegistry : IMigrationRegistry<TBase> Parameters factory Func<List<IMigration>, TRegistry> Factory function that creates the registry Returns IMigrationBuilder<TBase> The builder instance for finalization Type Parameters TRegistry Registry implementation type"
  },
  "api/EntityMigrationFramework.Builder.html": {
    "href": "api/EntityMigrationFramework.Builder.html",
    "title": "Namespace EntityMigrationFramework.Builder | Entity Migration Documentation",
    "summary": "Namespace EntityMigrationFramework.Builder Classes MigrationBuilder<TBase> Fluent builder for configuring and creating migration managers Interfaces IMigrationBuilderMigrationCollector<TBase, NextStage> Interface for collecting migration implementations during configuration IMigrationBuilderRegistrySelector<TBase, NextStage> Fluent interface for selecting and configuring migration registries IMigrationBuilder<TBase> Finalization interface for the migration builder"
  },
  "api/EntityMigrationFramework.Core.IMigration-2.html": {
    "href": "api/EntityMigrationFramework.Core.IMigration-2.html",
    "title": "Interface IMigration<TSrc, TDst> | Entity Migration Documentation",
    "summary": "Interface IMigration<TSrc, TDst> Namespace EntityMigrationFramework.Core Assembly EntityMigrationFramework.dll Represents a one-way strongly-typed migration from TSrc to TDst public interface IMigration<in TSrc, out TDst> : IMigration Type Parameters TSrc Source model type TDst Destination model type Inherited Members IMigration.SourceType IMigration.DestinationType IMigration.MigrateObject(object) Methods Migrate(TSrc) Executes the migration logic between specific model versions TDst Migrate(TSrc src) Parameters src TSrc Source model instance Returns TDst Migrated destination model instance"
  },
  "api/EntityMigrationFramework.Core.IMigrationManager-1.html": {
    "href": "api/EntityMigrationFramework.Core.IMigrationManager-1.html",
    "title": "Interface IMigrationManager<TBase> | Entity Migration Documentation",
    "summary": "Interface IMigrationManager<TBase> Namespace EntityMigrationFramework.Core Assembly EntityMigrationFramework.dll Manages migration operations between different model versions public interface IMigrationManager<TBase> Type Parameters TBase Common base type for all model versions Methods Migrate<TFrom, TTo>(TFrom) Migrates an object between two model versions TTo Migrate<TFrom, TTo>(TFrom obj) where TFrom : TBase where TTo : TBase Parameters obj TFrom Instance to migrate Returns TTo Migrated instance of destination type Type Parameters TFrom Source model type TTo Destination model type Exceptions MigrationPathNotFoundException No valid migration path exists InvalidMigrationException Error during migration execution"
  },
  "api/EntityMigrationFramework.Core.IMigrationRegistry-1.html": {
    "href": "api/EntityMigrationFramework.Core.IMigrationRegistry-1.html",
    "title": "Interface IMigrationRegistry<TBase> | Entity Migration Documentation",
    "summary": "Interface IMigrationRegistry<TBase> Namespace EntityMigrationFramework.Core Assembly EntityMigrationFramework.dll Defines the contract for migration path resolution strategies public interface IMigrationRegistry<TBase> Type Parameters TBase Base type for all versioned models Methods GetMigrationPath<TFrom, TTo>() Resolves a migration path between two model versions List<Func<object, object>> GetMigrationPath<TFrom, TTo>() where TFrom : TBase where TTo : TBase Returns List<Func<object, object>> Ordered sequence of migration delegates Type Parameters TFrom Source model type TTo Destination model type Exceptions MigrationPathNotFoundException Thrown when no valid path exists between versions"
  },
  "api/EntityMigrationFramework.Core.MigrationManager-1.html": {
    "href": "api/EntityMigrationFramework.Core.MigrationManager-1.html",
    "title": "Class MigrationManager<TBase> | Entity Migration Documentation",
    "summary": "Class MigrationManager<TBase> Namespace EntityMigrationFramework.Core Assembly EntityMigrationFramework.dll Default implementation of migration management public class MigrationManager<TBase> : IMigrationManager<TBase> Type Parameters TBase Common base type for all model versions Inheritance object MigrationManager<TBase> Implements IMigrationManager<TBase> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MigrationManager(IMigrationRegistry<TBase>) Initializes a new migration manager public MigrationManager(IMigrationRegistry<TBase> migrationRegistry) Parameters migrationRegistry IMigrationRegistry<TBase> Configured migration registry Exceptions MigrationPathNotFoundException Thrown when no valid migration path exists between requested types Methods Migrate<TFrom, TTo>(TFrom) Migrates an object between two model versions public TTo Migrate<TFrom, TTo>(TFrom obj) where TFrom : TBase where TTo : TBase Parameters obj TFrom Instance to migrate Returns TTo Migrated instance of destination type Type Parameters TFrom Source model type TTo Destination model type Exceptions MigrationPathNotFoundException No valid migration path exists InvalidMigrationException Error during migration execution"
  },
  "api/EntityMigrationFramework.Core.MigrationRegistry.GraphMigrationRegistry-1.html": {
    "href": "api/EntityMigrationFramework.Core.MigrationRegistry.GraphMigrationRegistry-1.html",
    "title": "Class GraphMigrationRegistry<TBase> | Entity Migration Documentation",
    "summary": "Class GraphMigrationRegistry<TBase> Namespace EntityMigrationFramework.Core.MigrationRegistry Assembly EntityMigrationFramework.dll Graph-based migration registry that finds paths between model versions public class GraphMigrationRegistry<TBase> : IMigrationRegistry<TBase> Type Parameters TBase Base type for all versioned models Inheritance object GraphMigrationRegistry<TBase> Implements IMigrationRegistry<TBase> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GraphMigrationRegistry(IEnumerable<IMigration>) Initializes a new graph-based registry public GraphMigrationRegistry(IEnumerable<IMigration> migrations) Parameters migrations IEnumerable<IMigration> Collection of migrations to build the graph from"
  },
  "api/EntityMigrationFramework.Core.MigrationRegistry.GraphMigrationRegistryBuilderExtension.html": {
    "href": "api/EntityMigrationFramework.Core.MigrationRegistry.GraphMigrationRegistryBuilderExtension.html",
    "title": "Class GraphMigrationRegistryBuilderExtension | Entity Migration Documentation",
    "summary": "Class GraphMigrationRegistryBuilderExtension Namespace EntityMigrationFramework.Core.MigrationRegistry Assembly EntityMigrationFramework.dll Builder extension methods for graph-based registry configuration public static class GraphMigrationRegistryBuilderExtension Inheritance object GraphMigrationRegistryBuilderExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseDefaultGraphRegistry<TBase, NextStage>(IMigrationBuilderRegistrySelector<TBase, NextStage>) Configures the default graph-based migration registry public static NextStage UseDefaultGraphRegistry<TBase, NextStage>(this IMigrationBuilderRegistrySelector<TBase, NextStage> builder) Parameters builder IMigrationBuilderRegistrySelector<TBase, NextStage> Builder instance Returns NextStage Configured builder instance Type Parameters TBase Base model type NextStage Next builder stage type"
  },
  "api/EntityMigrationFramework.Core.MigrationRegistry.html": {
    "href": "api/EntityMigrationFramework.Core.MigrationRegistry.html",
    "title": "Namespace EntityMigrationFramework.Core.MigrationRegistry | Entity Migration Documentation",
    "summary": "Namespace EntityMigrationFramework.Core.MigrationRegistry Classes GraphMigrationRegistryBuilderExtension Builder extension methods for graph-based registry configuration GraphMigrationRegistry<TBase> Graph-based migration registry that finds paths between model versions"
  },
  "api/EntityMigrationFramework.Core.html": {
    "href": "api/EntityMigrationFramework.Core.html",
    "title": "Namespace EntityMigrationFramework.Core | Entity Migration Documentation",
    "summary": "Namespace EntityMigrationFramework.Core Namespaces EntityMigrationFramework.Core.MigrationRegistry Classes MigrationManager<TBase> Default implementation of migration management Interfaces IMigrationManager<TBase> Manages migration operations between different model versions IMigrationRegistry<TBase> Defines the contract for migration path resolution strategies IMigration<TSrc, TDst> Represents a one-way strongly-typed migration from TSrc to TDst"
  },
  "api/EntityMigrationFramework.Exceptions.InvalidMigrationException.html": {
    "href": "api/EntityMigrationFramework.Exceptions.InvalidMigrationException.html",
    "title": "Class InvalidMigrationException | Entity Migration Documentation",
    "summary": "Class InvalidMigrationException Namespace EntityMigrationFramework.Exceptions Assembly EntityMigrationFramework.dll Exception thrown when invalid migration configuration is detected public class InvalidMigrationException : MigrationException, ISerializable Inheritance object Exception MigrationException InvalidMigrationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidMigrationException(string) Initializes a new instance with a message public InvalidMigrationException(string message) Parameters message string"
  },
  "api/EntityMigrationFramework.Exceptions.MigrationException.html": {
    "href": "api/EntityMigrationFramework.Exceptions.MigrationException.html",
    "title": "Class MigrationException | Entity Migration Documentation",
    "summary": "Class MigrationException Namespace EntityMigrationFramework.Exceptions Assembly EntityMigrationFramework.dll Represents all exceptions generated by this library. [Serializable] public class MigrationException : Exception, ISerializable Inheritance object Exception MigrationException Implements ISerializable Derived InvalidMigrationException MigrationPathNotFoundException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MigrationException() Initializes a new instance public MigrationException() MigrationException(string) Initializes a new instance with a message public MigrationException(string message) Parameters message string MigrationException(string, Exception) Initializes a new instance with a message and an inner exception public MigrationException(string message, Exception inner) Parameters message string inner Exception"
  },
  "api/EntityMigrationFramework.Exceptions.MigrationPathNotFoundException.html": {
    "href": "api/EntityMigrationFramework.Exceptions.MigrationPathNotFoundException.html",
    "title": "Class MigrationPathNotFoundException | Entity Migration Documentation",
    "summary": "Class MigrationPathNotFoundException Namespace EntityMigrationFramework.Exceptions Assembly EntityMigrationFramework.dll Exception thrown when no valid migration path exists between requested types public class MigrationPathNotFoundException : MigrationException, ISerializable Inheritance object Exception MigrationException MigrationPathNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MigrationPathNotFoundException(string) Initializes a new instance with a message public MigrationPathNotFoundException(string message) Parameters message string"
  },
  "api/EntityMigrationFramework.Exceptions.html": {
    "href": "api/EntityMigrationFramework.Exceptions.html",
    "title": "Namespace EntityMigrationFramework.Exceptions | Entity Migration Documentation",
    "summary": "Namespace EntityMigrationFramework.Exceptions Classes InvalidMigrationException Exception thrown when invalid migration configuration is detected MigrationException Represents all exceptions generated by this library. MigrationPathNotFoundException Exception thrown when no valid migration path exists between requested types"
  },
  "api/EntityMigrationFramework.Internals.IMigration.html": {
    "href": "api/EntityMigrationFramework.Internals.IMigration.html",
    "title": "Interface IMigration | Entity Migration Documentation",
    "summary": "Interface IMigration Namespace EntityMigrationFramework.Internals Assembly EntityMigrationFramework.dll [!WARNING DO NOT USE THIS!] Base interface for migrations public interface IMigration Properties DestinationType Destination type for the migration Type DestinationType { get; } Property Value Type SourceType Source type for the migration Type SourceType { get; } Property Value Type Methods MigrateObject(object) Executes migration on a boxed object object MigrateObject(object source) Parameters source object Source object to migrate Returns object"
  },
  "api/EntityMigrationFramework.Internals.html": {
    "href": "api/EntityMigrationFramework.Internals.html",
    "title": "Namespace EntityMigrationFramework.Internals | Entity Migration Documentation",
    "summary": "Namespace EntityMigrationFramework.Internals Interfaces IMigration [!WARNING DO NOT USE THIS!] Base interface for migrations"
  },
  "api/EntityMigrationFramework.Tests.UnitTest1.html": {
    "href": "api/EntityMigrationFramework.Tests.UnitTest1.html",
    "title": "Class UnitTest1 | Entity Migration Documentation",
    "summary": "Class UnitTest1 Namespace EntityMigrationFramework.Tests Assembly EntityMigrationFramework.Tests.dll public class UnitTest1 Inheritance object UnitTest1 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Test1() [Fact] public void Test1()"
  },
  "api/EntityMigrationFramework.Tests.html": {
    "href": "api/EntityMigrationFramework.Tests.html",
    "title": "Namespace EntityMigrationFramework.Tests | Entity Migration Documentation",
    "summary": "Namespace EntityMigrationFramework.Tests Classes UnitTest1"
  },
  "api/EntityMigrationFramework.html": {
    "href": "api/EntityMigrationFramework.html",
    "title": "Namespace EntityMigrationFramework | Entity Migration Documentation",
    "summary": "Namespace EntityMigrationFramework Namespaces EntityMigrationFramework.Builder EntityMigrationFramework.Core EntityMigrationFramework.Exceptions EntityMigrationFramework.Internals EntityMigrationFramework.Tests"
  },
  "api/EntityMigrationFrameworkExampleApp.Model.User.BaseUser.html": {
    "href": "api/EntityMigrationFrameworkExampleApp.Model.User.BaseUser.html",
    "title": "Class BaseUser | Entity Migration Documentation",
    "summary": "Class BaseUser Namespace EntityMigrationFrameworkExampleApp.Model.User Assembly EntityMigrationFrameworkExampleApp.dll Represents the base class for all versions of the User model public class BaseUser Inheritance object BaseUser Derived UserV1 UserV2 UserV3 UserV4 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id a shared property between all versions that will never change or get modified public Guid Id { get; set; } Property Value Guid"
  },
  "api/EntityMigrationFrameworkExampleApp.Model.User.Migrations.UserV1ToUserV2Migration.html": {
    "href": "api/EntityMigrationFrameworkExampleApp.Model.User.Migrations.UserV1ToUserV2Migration.html",
    "title": "Class UserV1ToUserV2Migration | Entity Migration Documentation",
    "summary": "Class UserV1ToUserV2Migration Namespace EntityMigrationFrameworkExampleApp.Model.User.Migrations Assembly EntityMigrationFrameworkExampleApp.dll Handles conversion from UserV1 to UserV2 by splitting name public class UserV1ToUserV2Migration : IMigration<UserV1, UserV2>, IMigration Inheritance object UserV1ToUserV2Migration Implements IMigration<UserV1, UserV2> IMigration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Migrate(UserV1) Converts from UserV1 to UserV2, Splits the Name property into FirstName and LastName public UserV2 Migrate(UserV1 src) Parameters src UserV1 Source UserV1 instance Returns UserV2 New UserV2 instance"
  },
  "api/EntityMigrationFrameworkExampleApp.Model.User.Migrations.UserV2ToUserV3Migration.html": {
    "href": "api/EntityMigrationFrameworkExampleApp.Model.User.Migrations.UserV2ToUserV3Migration.html",
    "title": "Class UserV2ToUserV3Migration | Entity Migration Documentation",
    "summary": "Class UserV2ToUserV3Migration Namespace EntityMigrationFrameworkExampleApp.Model.User.Migrations Assembly EntityMigrationFrameworkExampleApp.dll Adds Age property with default value public class UserV2ToUserV3Migration : IMigration<UserV2, UserV3>, IMigration Inheritance object UserV2ToUserV3Migration Implements IMigration<UserV2, UserV3> IMigration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Migrate(UserV2) Converts from UserV2 to UserV3, sets the default age to -1 public UserV3 Migrate(UserV2 src) Parameters src UserV2 Source UserV2 instance Returns UserV3 New UserV3 instance"
  },
  "api/EntityMigrationFrameworkExampleApp.Model.User.Migrations.UserV3ToUserV4Migration.html": {
    "href": "api/EntityMigrationFrameworkExampleApp.Model.User.Migrations.UserV3ToUserV4Migration.html",
    "title": "Class UserV3ToUserV4Migration | Entity Migration Documentation",
    "summary": "Class UserV3ToUserV4Migration Namespace EntityMigrationFrameworkExampleApp.Model.User.Migrations Assembly EntityMigrationFrameworkExampleApp.dll Adds Job information field public class UserV3ToUserV4Migration : IMigration<UserV3, UserV4>, IMigration Inheritance object UserV3ToUserV4Migration Implements IMigration<UserV3, UserV4> IMigration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Migrate(UserV3) Converts from UserV3 to UserV4, sets the default job to an empty string public UserV4 Migrate(UserV3 src) Parameters src UserV3 Source UserV2 instance Returns UserV4 New UserV3 instance"
  },
  "api/EntityMigrationFrameworkExampleApp.Model.User.Migrations.html": {
    "href": "api/EntityMigrationFrameworkExampleApp.Model.User.Migrations.html",
    "title": "Namespace EntityMigrationFrameworkExampleApp.Model.User.Migrations | Entity Migration Documentation",
    "summary": "Namespace EntityMigrationFrameworkExampleApp.Model.User.Migrations Classes UserV1ToUserV2Migration Handles conversion from UserV1 to UserV2 by splitting name UserV2ToUserV3Migration Adds Age property with default value UserV3ToUserV4Migration Adds Job information field"
  },
  "api/EntityMigrationFrameworkExampleApp.Model.User.Versions.UserV1.html": {
    "href": "api/EntityMigrationFrameworkExampleApp.Model.User.Versions.UserV1.html",
    "title": "Class UserV1 | Entity Migration Documentation",
    "summary": "Class UserV1 Namespace EntityMigrationFrameworkExampleApp.Model.User.Versions Assembly EntityMigrationFrameworkExampleApp.dll Initial user model with basic name property public class UserV1 : BaseUser Inheritance object BaseUser UserV1 Inherited Members BaseUser.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Full name of the user public required string Name { get; set; } Property Value string"
  },
  "api/EntityMigrationFrameworkExampleApp.Model.User.Versions.UserV2.html": {
    "href": "api/EntityMigrationFrameworkExampleApp.Model.User.Versions.UserV2.html",
    "title": "Class UserV2 | Entity Migration Documentation",
    "summary": "Class UserV2 Namespace EntityMigrationFrameworkExampleApp.Model.User.Versions Assembly EntityMigrationFrameworkExampleApp.dll Added first/last name split, removed the Name public class UserV2 : BaseUser Inheritance object BaseUser UserV2 Inherited Members BaseUser.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FirstName First name of the user public required string FirstName { get; set; } Property Value string LastName Last name of the user public required string LastName { get; set; } Property Value string"
  },
  "api/EntityMigrationFrameworkExampleApp.Model.User.Versions.UserV3.html": {
    "href": "api/EntityMigrationFrameworkExampleApp.Model.User.Versions.UserV3.html",
    "title": "Class UserV3 | Entity Migration Documentation",
    "summary": "Class UserV3 Namespace EntityMigrationFrameworkExampleApp.Model.User.Versions Assembly EntityMigrationFrameworkExampleApp.dll Added age property with default value public class UserV3 : BaseUser Inheritance object BaseUser UserV3 Inherited Members BaseUser.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Age The age of the user public int Age { get; set; } Property Value int FirstName public required string FirstName { get; set; } Property Value string LastName public required string LastName { get; set; } Property Value string"
  },
  "api/EntityMigrationFrameworkExampleApp.Model.User.Versions.UserV4.html": {
    "href": "api/EntityMigrationFrameworkExampleApp.Model.User.Versions.UserV4.html",
    "title": "Class UserV4 | Entity Migration Documentation",
    "summary": "Class UserV4 Namespace EntityMigrationFrameworkExampleApp.Model.User.Versions Assembly EntityMigrationFrameworkExampleApp.dll Added job information field public class UserV4 : BaseUser Inheritance object BaseUser UserV4 Inherited Members BaseUser.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Age public int Age { get; set; } Property Value int FirstName public required string FirstName { get; set; } Property Value string Job The job of the user public required string Job { get; set; } Property Value string LastName public required string LastName { get; set; } Property Value string"
  },
  "api/EntityMigrationFrameworkExampleApp.Model.User.Versions.html": {
    "href": "api/EntityMigrationFrameworkExampleApp.Model.User.Versions.html",
    "title": "Namespace EntityMigrationFrameworkExampleApp.Model.User.Versions | Entity Migration Documentation",
    "summary": "Namespace EntityMigrationFrameworkExampleApp.Model.User.Versions Classes UserV1 Initial user model with basic name property UserV2 Added first/last name split, removed the Name UserV3 Added age property with default value UserV4 Added job information field"
  },
  "api/EntityMigrationFrameworkExampleApp.Model.User.html": {
    "href": "api/EntityMigrationFrameworkExampleApp.Model.User.html",
    "title": "Namespace EntityMigrationFrameworkExampleApp.Model.User | Entity Migration Documentation",
    "summary": "Namespace EntityMigrationFrameworkExampleApp.Model.User Namespaces EntityMigrationFrameworkExampleApp.Model.User.Migrations EntityMigrationFrameworkExampleApp.Model.User.Versions Classes BaseUser Represents the base class for all versions of the User model"
  },
  "api/EntityMigrationFrameworkExampleApp.Program.html": {
    "href": "api/EntityMigrationFrameworkExampleApp.Program.html",
    "title": "Class Program | Entity Migration Documentation",
    "summary": "Class Program Namespace EntityMigrationFrameworkExampleApp Assembly EntityMigrationFrameworkExampleApp.dll The main class of the example app public static class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) The main entry point of the example app public static void Main(string[] args) Parameters args string[]"
  },
  "api/EntityMigrationFrameworkExampleApp.html": {
    "href": "api/EntityMigrationFrameworkExampleApp.html",
    "title": "Namespace EntityMigrationFrameworkExampleApp | Entity Migration Documentation",
    "summary": "Namespace EntityMigrationFrameworkExampleApp Namespaces EntityMigrationFrameworkExampleApp.Model.User Classes Program The main class of the example app"
  },
  "articles/getting_started.html": {
    "href": "articles/getting_started.html",
    "title": "Getting Started with docfx | Entity Migration Documentation",
    "summary": "Getting Started with docfx Getting Started docfx is an API documentation generator for .NET, currently support C# and VB. It has the ability to extract triple slash comments out from your source code. What's more, it has syntax to link additional files to API to add additional remarks. docfx will scan your source code and your additional conceptual files and generate a complete HTML documentation website for you. docfx provides the flexibility for you to customize the website through templates. We currently have several embedded templates, including websites containing pure static html pages and also website managed by AngularJS. Click \"View Source\" for an API to route to the source code in GitHub (your API must be pushed to GitHub) docfx provide DNX version for cross platform use. docfx can be used within Visual Studio seamlessly. NOTE offical docfx.msbuild nuget package is now in pre-release version. You can also build your own with source code and use it locally. We support Docfx Flavored Markdown(DFM) for writing conceptual files. DFM is 100% compatible with Github Flavored Markdown(GFM) and add several new features including file inclusion, cross reference, and yaml header."
  },
  "index.html": {
    "href": "index.html",
    "title": "docfx-seed | Entity Migration Documentation",
    "summary": "docfx-seed Description This is a sample docfx documentation project. It contains .NET source code and markdown files. docfx.json is the configuration file for running docfx. docfx will generate a static website as similar to http://docascode.github.io/docfx-seed. How to run Under Windows Download and unzip docfx.zip to run docfx.exe directly! Run docfx under current repo! Website will be generated under _site folder. Run any web hosting tool to host _site folder, e.g. docfx serve _site. Cross platform and use dnx As a prerequisite, you will need to install DNVM and DNX. ###Quick Start dnvm upgrade to get the latest dnvm. Add feed https://www.myget.org/F/aspnetrelease/api/v2/ to Nuget.config For Windows, the nuget config file is %AppData%\\NuGet\\NuGet.config. For Linux/OSX, the nuget config file is ~/.config/NuGet/NuGet.config. dnu commands install docfx to install docfx as a command Run docfx under current repo! Website will be generated under _site folder. Run any web hosting tool to host _site folder, e.g. docfx serve _site. Further information about docfx docfx is a tool to generate documentation towards .NET source code and markdown files. Please refer to docfx to get start. The docfx website itself is generated by docfx!"
  }
}